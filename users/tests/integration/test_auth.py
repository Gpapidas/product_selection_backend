import uuid

from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework import status

from shared.tests.base import BaseTestCase

User = get_user_model()


class AuthTestCase(BaseTestCase):
    def setUp(self):
        """
        Set up test user before each test.
        """
        super().setUp()
        self.login_url = reverse("users:login")
        self.logout_url = reverse("users:logout")
        self.refresh_url = reverse("users:token-refresh")

    def test_login_success(self):
        """
        Test successful login for the seeded test user.
        """
        response = self.client.post(
            self.login_url,
            {"email": self.test_user.email, "password": self.test_password},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["type"], "success")
        self.assertEqual(response.data["detail"], "User logged in successfully")
        self.assertIn("access_token", response.data["data"])
        self.assertIn("refresh_token", response.data["data"])
        self.assertEqual(response.data["data"]["user"]["email"], self.test_user.email)

    def test_login_auto_register(self):
        """
        Test auto-registering a new user on login.
        """
        new_email = f"user_{uuid.uuid4().hex}@example.com"
        new_password = "AutoGeneratedPass123!"  # nosec

        response = self.client.post(
            self.login_url,
            {"email": new_email, "password": new_password},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["type"], "success")
        self.assertEqual(response.data["detail"], "User logged in successfully")
        self.assertIn("access_token", response.data["data"])
        self.assertIn("refresh_token", response.data["data"])
        self.assertEqual(response.data["data"]["user"]["email"], new_email)
        # âœ… Validate that the user was created in the database
        self.assertTrue(User.objects.filter(email=new_email).exists())

    def test_login_missing_fields(self):
        """
        Test login with missing email or password.
        """
        response = self.client.post(self.login_url, {"email": self.test_user.email}, format="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(response.data["type"], "validation_error")
        self.assertEqual(response.data["errors"][0]["code"], "invalid")

    def test_logout_success(self):
        """
        Test successful logout using a valid refresh token.
        """
        self.authenticate()
        response = self.client.post(
            self.logout_url,
            {"refresh_token": self.refresh_token},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["type"], "success")

    def test_logout_invalid_token(self):
        """
        Test logout with an invalid refresh token.
        """
        self.authenticate()
        response = self.client.post(
            self.logout_url,
            {"refresh_token": "invalid_refresh_token"},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertEqual(response.data["type"], "client_error")
        self.assertEqual(response.data["errors"][0]["code"], "authentication_failed")

    def test_logout_unauthenticated(self):
        """
        Test logout without authentication headers.
        """
        self.unauthenticate()
        response = self.client.post(
            self.logout_url,
            None,
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertEqual(response.data["type"], "client_error")
        self.assertEqual(response.data["errors"][0]["code"], "not_authenticated")

    def test_refresh_success(self):
        """
        Test refreshing the access token using a valid refresh token.
        """
        self.authenticate()
        response = self.client.post(
            self.refresh_url,
            {"refresh": self.refresh_token},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["type"], "success")
        self.assertIn("access", response.data["data"])

    def test_refresh_invalid_token(self):
        """
        Test refresh token endpoint with an invalid token.
        """
        response = self.client.post(
            self.refresh_url,
            {"refresh": "invalid_refresh_token"},
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertEqual(response.data["type"], "client_error")
        self.assertEqual(response.data["errors"][0]["code"], "token_not_valid")
